FROM harbor.nbfc.io/nubificus/gh-actions-runner-gcc-lite:generic
#FROM ubuntu:20.04

# This the release tag of virtual-environments: https://github.com/actions/virtual-environments/releases
ARG UBUNTU_VERSION=2004
ARG VIRTUAL_ENVIRONMENT_VERSION=ubuntu20/20230109.1

ENV UBUNTU_VERSION=${UBUNTU_VERSION} VIRTUAL_ENVIRONMENT_VERSION=${VIRTUAL_ENVIRONMENT_VERSION}

# Set environment variable to prevent interactive installation
ENV DEBIAN_FRONTEND=noninteractive

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root
RUN if [ ! -d /tmp ]; then mkdir /tmp && chmod 777 /tmp && chmod +t /tmp; fi

# Add Kitware APT repository for updated CMake version
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    apt-transport-https ca-certificates gnupg && \
    apt-key adv --fetch-keys 'https://apt.kitware.com/keys/kitware-archive-latest.asc' && \
    echo 'deb https://apt.kitware.com/ubuntu/ focal main' > /etc/apt/sources.list.d/kitware.list && \
    apt-get update && \
    apt-get -y clean && \
    rm -rf /var/cache/apt /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install build-essential and update cmake
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update && \
    apt-get install -y --no-install-recommends gcc-10 g++-10 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 && \
    apt-get install -y --no-install-recommends build-essential cmake && \
    apt-get -y clean && \
    rm -rf /var/cache/apt /var/lib/apt/lists/* /tmp/* /var/tmp/*
    

# Install OpenCV

RUN apt-get update && \
  apt-get install -y --no-install-recommends \
  libopencv-dev && \
  apt-get -y clean && \
  rm -rf /var/cache/apt /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Install Python and Numpy

RUN apt-get update && \
  apt-get install -y --no-install-recommends \
  python3-dev \
  python3-pip \
  python3-setuptools \
  python3-wheel \
  python3-yaml \
  python3-numpy && \
  apt-get -y clean && \
  rm -rf /var/cache/apt /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Add PyTorch support
ARG PYTORCH_CUDA="cpu" # Default to CUDA 11.7, can be overridden at build time cu117
ENV PYTORCH_CUDA=${PYTORCH_CUDA}

# Install PyTorch dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    unzip \
    libopenblas-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libatlas-base-dev \
    gfortran \
    libffi-dev \
    libssl-dev && \
    apt-get -y clean && \
    pip3 install typing_extensions && \
    rm -rf /var/cache/apt /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install PyTorch
#RUN if [ "${PYTORCH_CUDA}" = "cpu" ]; then \
#        # Install PyTorch
#        wget https://download.pytorch.org/libtorch/cpu/libtorch-shared-with-deps-2.0.0%2Bcpu.zip && \
#        unzip libtorch-shared-with-deps-2.0.0+cpu.zip && \
#        mv libtorch /opt/pytorch && \
#        rm -rf libtorch-shared-with-deps-2.0.0+cpu.zip; \
#    else \
#        wget https://download.pytorch.org/libtorch/cu117/libtorch-shared-with-deps-2.0.0%2B${PYTORCH_CUDA}.zip && \
#        unzip libtorch-shared-with-deps-2.0.0+${PYTORCH_CUDA}.zip && \
#        mv libtorch /opt/pytorch && \
#        rm -rf libtorch-shared-with-deps-2.0.0+${PYTORCH_CUDA}.zip; \
#    fi

RUN git clone https://github.com/pytorch/pytorch --depth 1 --recursive && \
    cd pytorch && mkdir build && cd build && PYTHON=/usr/bin/python3 cmake ../ -DUSE_CUDA=off && \
    cmake --build . --parallel $(nproc) && \
    cmake --install . --prefix=/opt/pytorch && \
    cd ../../ && rm -rf pytorch

# Copy scripts.
COPY scripts/ /usr/local/bin/

COPY entrypoint.sh /
WORKDIR /home/runner
USER runner
ENTRYPOINT ["/entrypoint.sh"]
