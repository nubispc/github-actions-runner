name: Build NBFC runners
on:
  push:
    branches:
      - gk_gh_actions_runners
  workflow_dispatch:

env:
    # Use docker.io for Docker Hub if empty
    #REGISTRY: docker.io
    REGISTRY: harbor.nbfc.io/nubificus
    # github.repository as <account>/<repo>
    IMAGE_NAME: gh-actions-runner-gcc-lite
    # IMAGE_NAME: ${{ github.repository }}
    #IMAGE_NAME: ananos/${{ github.repository }}
    manifest_file: dockerImages_build_manifest.json

jobs:
  prepare:
      name: Generate matrix for build
      runs-on: [ self-hosted, gcc, lite ]
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        matrix2: ${{ steps.set-matrix.outputs.matrix2 }}
        myvars: ${{ steps.set-matrix.outputs.myvars }}
        files: ${{ steps.set-matrix.outputs.files}}
        arch: ${{ steps.set-matrix.outputs.arch}}
        registry: ${{ steps.dockerfiles.outputs.registry }}
        manifest_matrix: ${{ steps.parse-manifest.outputs.matrix }}
        build_level0: ${{ steps.parse-manifest.outputs.build_level0_matrix}}
        build_level1: ${{ steps.parse-manifest.outputs.build_level1_matrix}}

      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check files
        id: dockerfiles 
        run: |
          export dockerfiles=$( ls -1 Dockerfile.* )
          echo "$dockerfiles"
          # Escape newlines (replace \n with %0A)
          echo "::set-output name=dockerfiles::$( echo "$dockerfiles" | sed ':a;N;$!ba;s/\n/%0A/g' )"
          echo "registry=${{ env.REGISTRY }}" >> "$GITHUB_OUTPUT"
      - name: Set matrix for build
        id: set-matrix
        run: |
          dockerfiles="${{ steps.dockerfiles.outputs.dockerfiles }}"
          JSON="{\"dockerfile\":["
          # Loop by lines
          while read path; do
          # Add item to the matrix only if it is not already included and remove /
          path=${path}
          JSONline="\"$path\","
          if [[ "$JSON" != *"$JSONline"* ]]; then
          JSON="$JSON$JSONline"
          fi
          done <<< "$dockerfiles"
          if [[ $JSON == *, ]]; then
          JSON="${JSON%?}"
          fi
          JSON="$JSON], \"architecture\":[\"x86_64\", \"aarch64\", \"armv7l\"]}"
          echo $JSON
          # Set output
          echo "::set-output name=matrix::$( echo "$JSON" )"

      - name: parse manifest
        id: parse-manifest
        run: |
          matrix=$(cat ${{github.workspace}}/${{env.manifest_file}}| tr -d '[:space:]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo $matrix
          build_level0_matrix=$(jq -e .dockerfile_build_components[] | jq 'walk(if type == "object" and .build_level == 1 then del(.) else . end)' ${{github.workspace}}/${{env.manifest_file}}  | tr -d '[:space:]' | sed -E 's/(,)?null(,)?//g')
          echo "build_level0_matrix=$build_level0_matrix" >> $GITHUB_OUTPUT
          build_level1_matrix=$(jq -e .dockerfile_build_components[] | jq 'walk(if type == "object" and .build_level == 0 then del(.) else . end)' ${{github.workspace}}/${{env.manifest_file}}  | tr -d '[:space:]' | sed -E 's/(,)?null(,)?//g')
          echo "build_level1_matrix=$build_level1_matrix" >> $GITHUB_OUTPUT
          echo "build0:"
          echo $build_level0_matrix
          echo "build1:"
          echo $build_level1_matrix          



  build-base:
    needs: [prepare]
    runs-on: ["gcc","lite"]
    # uses: ./.github/workflows/nubis-build.yaml
    # secrets: inherit
    # strategy:
    #   matrix:
    #     dockerfiles: ${{ fromJson(toJSON(fromJson(needs.prepare.outputs.build_level0).image_filename)) }}
    #   fail-fast: false
    # with:
    #   matrix: ${{ needs.prepare.outputs.matrix }}
    #   #dockerfile: ${{ toJSON(fromJson(needs.prepare.outputs.matrix).dockerfile) }}
    #   dockerfile: ${{ matrix.dockerfiles }}
    #   registry: ${{ needs.prepare.outputs.registry }}
    steps:
    - name: test base build
      run: |
        echo ${{ toJSON(fromJson(needs.prepare.outputs.build_level0)) }}


  build:
    needs: [prepare, build-base]
    runs-on: ["gcc","lite"] 
    # uses: ./.github/workflows/nubis-build.yaml
    # secrets: inherit
    # strategy:
    #   matrix:
    #     dockerfiles: ${{ fromJson(toJSON(fromJson(needs.prepare.outputs.build_level1).image_filename)) }}
    #   fail-fast: false
    # with:
    #   matrix: ${{ needs.prepare.outputs.matrix }}
    #   #dockerfile: ${{ toJSON(fromJson(needs.prepare.outputs.matrix).dockerfile) }}
    #   dockerfile: ${{ matrix.dockerfiles }}
    #   registry: ${{ needs.prepare.outputs.registry }}
    steps:
    - name: test base build
      run: |
        echo ${{ toJson(fromJson(needs.prepare.outputs.build_level1)) }}
