name: build-arch
on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string

      dockerfile:
        required: true
        type: string

      registry:
        required: true
        type: string

jobs:
  build:
    runs-on: [ self-hosted, "${{ matrix.architecture }}", gcc, lite ]
    
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    strategy:
      matrix: 
        architecture: ${{ fromJson(toJSON(fromJson(inputs.matrix).architecture)) }}
        #${{ fromJson(inputs.matrix) }}
      fail-fast: false

    outputs:
      image_name: ${{ steps.build.outputs.image_name }}

    steps:
    - name: Build
      id: build
      run: |
          echo ${{ matrix.architecture }}
          GEN=$( echo "${{ inputs.dockerfile }}" | sed s/Dockerfile\.// )
          echo "image_name=harbor.nbfc.io/nubificus/gh-actions-runner-$GEN" >> "$GITHUB_OUTPUT"

    - name: Checkout
      uses: actions/checkout@v3
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@ca922a571676e06d3299cce5d520e178ba89a276
      with:
        cosign-release: 'v1.13.1'
    - name: Check install!
      run: cosign version
    - name: Set up Docker Context for Buildx
      id: buildx-context
      run: |
          docker context create builders || true
    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      with:
        version: latest
        endpoint: builders
    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ inputs.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ inputs.REGISTRY }}
        username: ${{ secrets.HARBOR_USER }}
        password: ${{ secrets.HARBOR_SECRET }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ inputs.registry }}/${{ steps.build.outputs.image_name }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        #cache-from: type=local,src=/tmp
        #cache-to: type=local,mode=max,dest=/tmp
        file: ${{ inputs.dockerfile }}


    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
    - name: Clean up Docker Context for Buildx
      id: buildx-context-cleanup
      run: |
          docker context remove builders || true

  manifest:
    runs-on: [ self-hosted, gcc, lite ]
    needs: [build]
    
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
    - name: Create manifest for ${{ needs.build.outputs.image_name }}
      run: |
          VAR1=$(echo ${{ toJSON(fromJson(inputs.matrix).architecture[0]) }})
          VAR2=$(echo ${{ toJSON(fromJson(inputs.matrix).architecture[1]) }})
          echo docker manifest rm ${{ needs.build.outputs.image_name }}:generic || true
          echo docker manifest create ${{ needs.build.outputs.image_name }}:generic \
              --amend ${{ needs.build.outputs.image_name }}:$(echo $VAR1) \
              --amend ${{ needs.build.outputs.image_name }}:$(echo $VAR2) 

