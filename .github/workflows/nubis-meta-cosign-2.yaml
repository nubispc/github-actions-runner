name: Build NBFC runners
on:
  push:
    branches:
      - testing-cosign
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: docker.io
  REGISTRY: harbor.nbfc.io/nubificus
  # github.repository as <account>/<repo>
  IMAGE_NAME: gh-actions-runner-gcc-lite
  # IMAGE_NAME: ${{ github.repository }}
  #IMAGE_NAME: ananos/${{ github.repository }}

jobs:
  prepare:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix2: ${{ steps.set-matrix.outputs.matrix2 }}
      myvars: ${{ steps.set-matrix.outputs.myvars }}
      files: ${{ steps.set-matrix.outputs.files}}
      arch: ${{ steps.set-matrix.outputs.arch}}
      registry: ${{ steps.dockerfiles.outputs.registry }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main
        
    - name: Install cosign
      if: ${{ github.event_name != 'pull_request' && needs.setup.outputs.enable == 'true' }}
      uses: sigstore/cosign-installer@ca922a571676e06d3299cce5d520e178ba89a276
      with:
        cosign-release: 'v1.13.1'
        
    - name: Check install!
      if: ${{ github.event_name != 'pull_request' && needs.setup.outputs.enable == 'true' }}
      run: cosign version
      
    - name: Check files
      id: dockerfiles 
      run: |
        export dockerfiles=$( ls -1 Dockerfile.gcc-lite )
        echo "$dockerfiles"
        # Escape newlines (replace \n with %0A)
        echo "::set-output name=dockerfiles::$( echo "$dockerfiles" | sed ':a;N;$!ba;s/\n/%0A/g' )"
        echo "registry=${{ env.REGISTRY }}" >> "$GITHUB_OUTPUT"
        
    - name: Set matrix for build
      id: set-matrix
      run: |
        dockerfiles="${{ steps.dockerfiles.outputs.dockerfiles }}"
        JSON="{\"dockerfile\":["
        # Loop by lines
        while read path; do
        # Add item to the matrix only if it is not already included and remove /
        path=${path}
        JSONline="\"$path\","
        if [[ "$JSON" != *"$JSONline"* ]]; then
        JSON="$JSON$JSONline"
        fi
        done <<< "$dockerfiles"
        if [[ $JSON == *, ]]; then
        JSON="${JSON%?}"
        fi
        JSON="$JSON], \"architecture\":[\"x86_64\", \"aarch64\"]}"
        echo $JSON
        # Set output
        echo "::set-output name=matrix::$( echo "$JSON" )"
        
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' && needs.setup.outputs.enable == 'true' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: |
        echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
        cosign upload
